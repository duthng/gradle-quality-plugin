

plugins {
  id 'java-gradle-plugin'
  id 'groovy'
  id 'maven-publish'
  id 'signing'
  id 'net.researchgate.release' version '2.6.0'
  id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.60'
}



repositories {
  jcenter()
}

dependencies {
  implementation localGroovy()
  implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubePluginVersion}"

  testImplementation gradleTestKit()
  testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
}

test {
  // To use JUnit5 Jupiter
  useJUnitPlatform()

  // Tests summary (displayed at the end)
  afterSuite { desc, result ->
    if (!desc.parent) {
      println "\nTests result: ${result.resultType}"
      println "Tests summary: ${result.testCount} tests, " +
              "${result.successfulTestCount} succeeded, " +
              "${result.failedTestCount} failed, " +
              "${result.skippedTestCount} skipped"
    }
  }
}

gradlePlugin {
  plugins {
    gradleQuality {
      id = "com.ekino.oss.gradle.plugin.quality"
      implementationClass = "com.ekino.oss.gradle.plugin.quality.QualityPlugin"
    }
  }
}

task sourcesJar(type: Jar) {
  classifier "sources"
  from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
  classifier "javadoc"
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {

      from components.java

      artifact sourcesJar
      artifact javadocJar

      pom {
        name = 'Gradle java plugin'
        description = 'Java plugin applying some configuration for your builds (mavenPublish, testSets, etc ...)'
        url = 'https://github.com/ekino/gradle-quality-plugin'
        licenses {
          license {
            name = 'MIT License (MIT)'
            url = 'https://opensource.org/licenses/mit-license'
          }
        }
        developers {
          developer {
            organization = 'ekino'
            organizationUrl = 'https://www.ekino.com/'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/ekino/gradle-quality-plugin.git'
          developerConnection = 'scm:git:ssh://github.com:ekino/gradle-quality-plugin.git'
          url = 'https://github.com/ekino/gradle-quality-plugin'
        }
      }

    }

    //needed by sonatype oss check in staging
    mavenPluginMarker(MavenPublication) {
      groupId gradlePlugin.plugins.gradleQuality.id
      artifactId gradlePlugin.plugins.gradleQuality.id + ".gradle.plugin"
      pom {
        name = 'Gradle quality plugin'
        description = 'Quality plugin applying some configuration for your builds (checkstyle, jacoco, sonarqube)'
        url = 'https://github.com/ekino/gradle-quality-plugin'
        licenses {
          license {
            name = 'MIT License (MIT)'
            url = 'https://opensource.org/licenses/mit-license'
          }
        }
        developers {
          developer {
            organization = 'ekino'
            organizationUrl = 'https://www.ekino.com/'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/ekino/gradle-quality-plugin.git'
          developerConnection = 'scm:git:ssh://github.com:ekino/gradle-quality-plugin.git'
          url = 'https://github.com/ekino/gradle-quality-plugin'
        }
      }
      pom.withXml {
        def dependency = asNode().appendNode('dependencies').appendNode('dependency')
        dependency.appendNode('groupId', project.group)
        dependency.appendNode('artifactId', project.name)
        dependency.appendNode('version', project.version)

      }

    }
  }
  repositories {
    maven {
      url = ossrhUrl
      credentials {
        username = ossrhUsername
        password = ossrhPassword
      }
    }
  }
}

task printVersion {
  println project.version
}

signing {
  sign publishing.publications.mavenJava
  //needed by sonatype oss check in staging
  sign publishing.publications.mavenPluginMarker
}

task gitChangelogTask(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
  file = new File("CHANGELOG.md")
  templateContent = file('changelog.mustache').getText('UTF-8')
}